create table ISSUESLISTS
(
    ID SERIAL PRIMARY KEY,
    NAME VARCHAR(50)
);

CREATE TABLE ISSUES
(
    ID SERIAL PRIMARY KEY,
    ISSUESLISTS_ID BIGINT UNSIGNED NOT NULL,
    FOREIGN KEY (ISSUESLISTS_ID) REFERENCES ISSUESLISTS(ID),
    SUMMAR VARCHAR(20),
    DESCRIPTION VARCHAR(200),
    USER_ID_ASSIGNEDTO BIGINT UNSIGNED NOT NULL,
    FOREIGN KEY (USER_ID_ASSIGNEDTO) REFERENCES USERS(ID)

);

INSERT INTO ISSUESLISTS (NAME) VALUES ('ToDo');
INSERT INTO ISSUESLISTS (NAME) VALUES ('In progress');
INSERT INTO ISSUESLISTS (NAME) VALUES ('Done');

-- Dodanie zadań do listy "ToDo"
INSERT INTO ISSUES (ISSUESLISTS_ID, SUMMAR, DESCRIPTION, USER_ID_ASSIGNEDTO)
VALUES
    (1, 'Fix bug A', 'Resolve issue with login form', 1),
    (1, 'Add feature X', 'Implement user profile page', 2),
    (1, 'Update docs', 'Write documentation for API', 3),
    (1, 'Optimize query', 'Improve database performance', 4),
    (1, 'Fix CSS issue', 'Correct button alignment in header', 4);

-- Dodanie zadań do listy "In progress"
INSERT INTO ISSUES (ISSUESLISTS_ID, SUMMAR, DESCRIPTION, USER_ID_ASSIGNEDTO)
VALUES
    (2, 'Develop module Y', 'Work on payment integration', 1),
    (2, 'Test feature Z', 'Run tests on the new notification system', 2),
    (2, 'Fix performance bug', 'Optimize rendering in the dashboard', 3),
    (2, 'Refactor code', 'Improve code quality in auth service', 4),
    (2, 'Debug API error', 'Resolve 500 error in user API', 1);

-- Dodanie zadań do listy "Done"
INSERT INTO ISSUES (ISSUESLISTS_ID, SUMMAR, DESCRIPTION, USER_ID_ASSIGNEDTO)
VALUES
    (3, 'Complete report', 'Finish and send quarterly report', 1),
    (3, 'Deploy version 1.0', 'Deploy the initial version to production', 2),
    (3, 'Fix typo', 'Correct a typo on the landing page', 3),
    (3, 'Setup CI/CD', 'Integrate CI/CD pipeline for backend', 4),
    (3, 'Improve SEO', 'Optimize meta tags and content', 2);

SELECT * FROM ISSUES;
# Listę zadań z tabeli ISSUESS z dołączonymi do nich nazwami list zadań z tabeli ISSUESLISTS
SELECT I.DESCRIPTION as Task, L.NAME as Type
FROM ISSUES I
JOIN ISSUESLISTS L ON I.ISSUESLISTS_ID = L.ID;

# Listę zadań z tabeli ISSUESS z przypisanymi do nich użytkownikami z tabeli USERS
SELECT  USERS.ID, FIRSTNAME, LASTNAME, ISSUES.DESCRIPTION
FROM ISSUES
JOIN USERS ON ISSUES.USER_ID_ASSIGNEDTO = USERS.ID;

# Imiona i nazwiska użytkowników posiadających zadania, wraz z informacją o ilości zadań, które są do nich przypisane

SELECT USERS.FIRSTNAME AS USER_NAME, USERS.LASTNAME AS USER_SURNAME, COUNT(ISSUES.ID) AS TASK_COUNT
FROM USERS JOIN ISSUES ON USERS.ID = ISSUES.USER_ID_ASSIGNEDTO
GROUP BY USERS.ID, USERS.FIRSTNAME, USERS.LASTNAME
HAVING TASK_COUNT > 0
ORDER BY USERS.ID, USERS.FIRSTNAME, USERS.LASTNAME;

